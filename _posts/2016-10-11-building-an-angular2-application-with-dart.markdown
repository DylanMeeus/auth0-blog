---
layout: post
title: "Building an Angular2 application with Dart"
description: <A SHORT DESCRIPTION OF THE POST>
date: 2016-10-11 23:46
author: 
  name: Dylan Meeus
  name: Dylan Meeus
  url: http://www.twitter.com/DylanMeeus
  mail: meeusdylan@hotmail.com
  avatar: https://en.gravatar.com/userimage/67902576/25a6df871f404218103361055634917f.jpeg
design: 
  bg_color: "#222228"
  image: http://it-ca.net/auth0_images/dartlang.png
tags: 
- dart
- angular2
---


# What is Dart/Angular2

## Angular2 introduction
Angular2 is the new framework by google which is aiming to ease webdevelopment in order for websites to be easily made for mobile and desktop platforms. If you are doing anything with the web it is almost impossible to not have heard of angular2 by now. A couple of weeks ago angular2 hit the first version of their final release, though that was for the angular2 with typescript combination. In this blog we will take a look at an alternative way of developing angular2 applications, namely with the Angular2-Dart combination. An important thing to note is that there are two versions of Angular2, one being developed for Typescript and the other being developed for Dart. Though Angular2 hit a final release some weeks ago, it is important to note that this was strictly about the Angular2-Typescript combination and not about the Angular2-Dart combination. At the time of writing, the version of angular2 for dart is [Angular2 2.0.0-beta.22](https://pub.dartlang.org/packages/angular2). Before we jump into creating an application with Angular2 and Dart, we continue with a short introduction to Dart itself and how it compares with Typescript and plain Javascript.

## Dart introduction
[Dart](https://www.dartlang.org/) is a programming language developed by google which aims to provide a developer with useful libraries and tools to develop large applications. Dart can be used to develop a wide array of applications, such as web, mobile and desktop applications, but can just as well be used for IoT devices. Dart is an Object Oriented language with full support for classes, interfaces, abstract classes and more of the OO Goodness. Because you can run your code in a browser, you can transpile the code into javascript code. This means that it can run natively in all browser, though you could opt for using the [Dartium Browser](https://webdev.dartlang.org/tools/dartium) which can run Dart code without first transpiling it into javascript code. Interestingly, Dart code can also be compiled into Machine Code, to run outside of the browser on Mobile devices for example. An interesting thing to note here is that the transpiled javascript code generated by Dart runs, in some cases, faster than handwritten javascript code. If you want to find out more about the performance you can get out of Dart, there is some provided [benchmark information](https://www.dartlang.org/performance) you can check out. 

## Dart or Typescript
Both Dart and Typescript are projects with support from two large companies, namely Google and Microsoft respectively. In addition [Dart](https://github.com/dart-lang/sdk) as well as [Typescript](https://github.com/Microsoft/Typescript) are open source projects that leverage the power of the community to make the product better. They are both actively being developped at rapid speed and the progress can easily be followed as they are transparent about this. Both languages use classes, constructors, interfaces and offer great new ways of dealing with the web. Asynchronous programming is made easier by both languages and they fix issues from plain javascript. However, whilst Typescript is a superset of Javascript it necessarily has some constraints that Javascript has. Dart, on the other hand is an entirely new programming language which can be both a good and a bad thing. One of the reasons that Typescript is so popular is that you can easily write Javascript code inside your Typescript application and it will work as intended. This means that libraries written for Javascript can easily be used in Typescript, which is not the case for Dart. When using a Javascript library in Dart you will need to use some wrappers to make it work. At this point it seems that developers prefere using Dart over Typescript, as developers can leverage their existing knowledge of Javascript to develop for Typescript the transition is made with more ease. 

# Building an Angular2 app with Dart
The application we are going to build will demonstrate various aspects of Angular2 as well as Dart. We are going to make an application that fetches information of recentpy updated repositories from Github and displays it to the user. We will add some authentication to this and have a secure page only accessible to logged in users, where they can enter their own query to search github. The code that will be displayed in this post will be snippets of the full code, if you want to see the full code you can find it [here](https://github.com/DylanMeeus/auth0-angular2-dart).

## Getting Started
### Setting up the Dart SDK
Getting started with Dart and Angular2 just takes a few minutes, as the Dart SDK comes with all the tools that we need to create applications. To get started, first get the Dart SDK for your system here: [https://www.dartlang.org/install](https://www.dartlang.org/install). Installation of this is easy on any platform of your choice and should not take more than a few miuntes. The version that we will be using here is the current stable version, 1.20.1. The Dart SDK comes with pub, the Dart package manager which will come in handy during the development of our application. 

### Setting up our project
First create a directory where you want to develop your application, and navigate to the root of this. In the root we need to create a `pubspec.yaml` file. This defines our application for the pub package manager, we can add a description of our project here and set some dependencies and transformers. We will need a few extra dependencies in our project that are not in a standard file, as we will deal with asynchonous code, web requests, and parsing json. To start with you can create a file containing this information:

```
name: dartblog
description: Supporting code for the blog regarding angular2/dart
version: 0.0.1
environment:
  sdk: '>=1.19.0 <2.0.0'
  dependencies:
    angular2: 2.0.0-beta.22
    browser: ^0.10.0
    dart_to_js_script_rewriter: ^1.0.1
    http: ^0.11.3
    json_object: any
    observe: any
 transformers:
   - angular2:
      platform_directives:
         - 'package:angular2/common.dart#COMMON_DIRECTIVES'
      platform_pipes:
         - 'package:angular2/common.dart#COMMON_PIPES'
      entry_points: web/main.dart
      resolved_identifiers:
           BrowserClient: 'package:http/browser_client.dart'
- dart_to_js_script_rewriter
```

As Angular2 is still in beta and thus changes, it is a good idea to set the version explicitely in this file so you can be sure to have the same version as in this blog.


## Building a (simple) user application
Building an application that allows a user to register (entering some information about the user) and then using the created account to log in and view the other users in the system. 
When the user is logged in, have some options to change data about the user (name/age) to show the databinding and the updates.
- Possible to extend with sending a message to the user

## Dealing with changes
Write some information about how Angular2 deals with change detection, such as how to correctly handle data being added to the array of users. 

## ASIDE: Integrating with Auth0
Extend our application to use JWT, and manage the login with Auth0. Provide information to further reading about Auth0 and other Angular2 blogs using Auth0.


# Conclusion
Angular2 with Dart is still undergoing development so everything that you read here could potentially change in the future and as thus this conclusion might not hold anymore some weeks or months from now. Dart as a language seems to be well developed and it offers developers with a wide range of features to profit from. It might be worth learning Dart even if you do not plan on doing any development with Angular2 as the reach of Dart is much more than just Angular2. In terms of Angular2 development, it seems to me that Angular2/Typescript is a safer route to go. The release of Angular2 with Typescript is in the first final version so there should, in theory, be no more breaking changes. As Google is developing both versions of Angular independently it does mean that once both hit the final release, developpers get given the choice in which language they feel most comfortable with and which one will integrate best with their environment. As so often with sofware development, the road you should take depends on the specific problem you are solving, and as always, your mileage may vary.

### Further reading
* [Angular2 + Dart quickstart](https://angular.io/docs/dart/latest/quickstart.html)
* [Dart news](http://news.dartlang.org/)

