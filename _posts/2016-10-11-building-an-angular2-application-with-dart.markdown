---
layout: post
title: "Building an Angular2 application with Dart"
description: <A SHORT DESCRIPTION OF THE POST>
date: 2016-10-11 23:46
author: 
  name: Dylan Meeus
  name: Dylan Meeus
  url: http://www.twitter.com/DylanMeeus
  mail: meeusdylan@hotmail.com
  avatar: https://en.gravatar.com/userimage/67902576/25a6df871f404218103361055634917f.jpeg
design: 
  bg_color: "#222228"
  image: http://it-ca.net/auth0_images/dartlang.png
tags: 
- dart
- angular2
---


# What is Dart/Angular2

## Angular2 Introduction
Angular2 is the latest framework from google which is aiming to ease webdevelopment. If you are doing anything with the web it is almost impossible to not have heard of Angular by now. A couple of weeks ago Angular 2 hit a major milestone with the official release of Angular 2.0, though this was for the angular2 with TypeScript combination. In this tutorial we will take a look at an alternative way of developing angular2 applications, namely with the Angular2 with Dart combination. An important thing to note is that there are two versions of Angular2, one being developed for TypeScript and the other being developed for Dart. At the time of writing, the version of angular2 for dart is [Angular2 2.0.0-beta.22](https://pub.dartlang.org/packages/angular2). Before we jump into creating an application with Angular2 and Dart, let's start with a short introduction to Dart itself and how it compares with TypeScript and plain JavaScript.

## Dart Introduction
[Dart](https://www.dartlang.org/) is a programming language developed by Google which aims to provide  developers with useful libraries and tools to develop large applications. Dart can be used to develop a wide array of applications, such as web, mobile and desktop applications, but can just as well be used for IoT devices. Dart is an Object Oriented language with full support for classes, interfaces, abstract classes and more OO goodness. Because you need to run your code in a browser, you must transpile it into JavaScript code. You could opt for using the [Dartium Browser](https://webdev.dartlang.org/tools/dartium) which can run Dart code without first transpiling it into JavaScriptp code. Interestingly, Dart code can also be compiled into machine code, so that it can run outside of the browser on mobile devices for example. An interesting thing to note here is that the transpiled JavaScript code generated by Dart runs, in some cases, faster than handwritten JavaScript code. If you want to find out more about the performance benefits Dart, there is some [benchmarks](https://www.dartlang.org/performance).

## Dart or TypeScript
Both Dart and TypeScript are projects with support from two large companies, Google and Microsoft respectively. In addition [Dart](https://github.com/dart-lang/sdk) as well as [TypeScript](https://github.com/Microsoft/TypeScript) are open source projects that leverage the power of the community to make the product better. They are both actively being developped at rapid speed and the progress can easily be followed as they are transparent about this. Both languages use classes, constructors, interfaces and offer great new ways of dealing with the web. Asynchronous programming is made easier by both languages and they fix issues from plain JavaScript. However, whilst TypeScript is a superset of JavaScript and therefore has some of the same constraints that plague JavaScript. Dart, on the other hand is an entirely new programming language which can be both a good and a bad thing. One of the reasons that TypeScript is so popular is that you can easily write JavaScript code inside your TypeScript application and it will work as intended. This means that libraries written for JavaScript can easily be used in TypeScript, which is not the case for Dart. When using a JavaScript library in Dart you will need to use wrappers to make it work. At this point it seems that developers prefer using TypeScript over Dart, as they can leverage their existing knowledge of JavaScript.

# Building an Angular2 App with Dart
The application we are going to build will demonstrate various aspects of Angular2 as well as Dart. We are going to make an application that fetches information of recently updated repositories from Github and displays it to the user. We will add some authentication to this and have a secure page only accessible to logged in users, where they will be able to execute their own queries. The code that will be displayed in this post will be snippets of the full code, if you want to see the full code you can find it [here](https://github.com/DylanMeeus/auth0-angular2-dart).

## Getting Started
### Setting up the Dart SDK
Getting started with Dart and Angular2 just takes just a few minutes, as the Dart SDK comes with all the tools that we need to create applications. To get started, first get the Dart SDK for your system here: [https://www.dartlang.org/install](https://www.dartlang.org/install) and run through the installer. The version that we will be using here is the current stable version, 1.20.1. The Dart SDK comes with pub, the Dart package manager which will come in handy during the development of our application.

### Setting up our Project
First create a directory where you want to develop your application, and navigate to it. In the root of this directory we need to create a `pubspec.yaml` file. This defines our application for the pub package manager, Here, we can add a description of our project here and set some dependencies and transformers. We will need a few external dependencies in our project that are, as we will deal with asynchonous code, web requests, and parsing JSON. To start, create a file containing the following information:

```
name: dartblog
description: Supporting code for the blog regarding angular2/dart
version: 0.0.1
environment:
  sdk: '>=1.19.0 <2.0.0'
  dependencies:
    angular2: 2.0.0-beta.22
    browser: ^0.10.0
    dart_to_js_script_rewriter: ^1.0.1
    http: ^0.11.3
    json_object: any
    observe: any
 transformers:
   - angular2:
      platform_directives:
         - 'package:angular2/common.dart#COMMON_DIRECTIVES'
      platform_pipes:
         - 'package:angular2/common.dart#COMMON_PIPES'
      entry_points: web/main.dart
      resolved_identifiers:
           BrowserClient: 'package:http/browser_client.dart'
- dart_to_js_script_rewriter
```

As Angular 2 Dart is still in beta and thus changes are expected, it is a good idea to set the version explicitly in this file so you can be sure you have the same version as in this post.


## Building a Simple Application
The application we are going to build will deal with GitHub repositories. We are going to fetch data from github, but we will start building the application from the ground up. Keep in mind that you can always find the complete code on [github](https://github.com/DylanMeeus/auth0-angular2-dart). The first step to building our application is providing an app_component.dart. This will be the first file that get's loaded when the application is started and we visit the root of the website. Our HTML will just contain some navigation options for now, and a router-outler. The router is what will handle the navigation for us but we need not yet worry about that.

###  Creating the Main Files

In our application we will have two main files, these can be thought of as the start of our application and will be called 'main.dart' and 'index.html' respectively.
The index.html will be the first file that our Angular app will display. This is hooked up to a main.dart file where we can bootstrap the services that we need. The files are rather small for our project, so in the main.dart file we just have a main method and a browserclient.

```
BrowserClient newBrowserClient() => new BrowserClient();

void main(){
  bootstrap(
      AppComponent,
      const [
        const Provider(BrowserClient, useFactory: newBrowserClient, deps: const [])
      ],
        [UserService], [Router]
  );
}
```

Next, we have an index.html file which contains some scripts as well as the Bootstrap UI library so that we can have a better looking layout.

```
<!DOCTYPE html>
<html>
<head>
    <title>Angular2 Dart example</title>
    <link rel="stylesheet" href="css/styles.css">
    <script defer src="main.dart" type="application/dart"></script>
    <script defer src="packages/browser/dart.js"></script>

    <base href="/">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

    <!-- End bootstrap CDN -->
</head>
<body>
<my-app>Loading...</my-app>
</body>
</html>
```


### Creating the app_component

#### Creating the .dart file

We will need to create two parts for this, an app_component.dart and a corresponding "view" which will be app_component.html. First, we will take a look at the app_component.dart file and later we will take a look at the HTMl counterpart. It is important that the Dart file is created under the lib directory, because pub will look in this directory to find Dart files when we refer to them later in the development. We could actually write the HTML code inside the .dart file as well, but we'll excercise separation of concerns and split the files out. The first part of such a component will be the '@Component' annotation. Let's take a look at what we can put in the @Component, and then break it down.


```
@Component(
selector: 'my-app',
templateUrl: '../web/app_component.html',
directives: const [GithubComponent,ROUTER_DIRECTIVES],
providers: const [GithubService,ROUTER_PROVIDERS, UserService]
)
```

This component has several parts to it, the ones that every Angular component needs is the 'selector' and the 'templateUrl', though 'templateUrl' could be replaced with 'template' if we were going to inline out HTML code. The *selector* is how we can identify our component and use it in other HTML code, as we will see later. The *templateUrl* is a link to where we can find the corresponding HTML template for this component. *Directives* are used to add some extra functionality to our component, for example other components can be included here. Finally, *providers* are used to add services to our component. Services provide some functionality as well and are often a way to share data between components.

Because our app_component also wants to deal with navigation we need to add a configuration for the router. The ROUTER_DIRECTIVES and the ROUTER_PROVIDERS are what we need to work with the router. The directives provide us with the HTML tag to add the router outlet, and the provider is a service as explained earlier.

```
@RouteConfig(const[
  const Route(path: '/public', name: 'Public', component: PublicComponent),
  const Route(path: '/private', name: 'Private', component: PrivateComponent),
  const Route(path: '/login', name: 'Login', component: LoginComponent),
]
)
```

In this router configuration, we are exposing three routes and linking them to components that we will create soon. The public and private components will deal with the GitHub API, while the login component will handle authentication.

Once we have this set up, all that is left for our app_component.dart file is to actually include a dart class for the AppComponent. For now we can just leave this class empty as it does not need any further logic yet.

```
class AppComponent{}

```

#### Adding the app_component template
In the Dart component we are referring to a template via a URL. The template still needs to be created and this can preferably be done in a different location as the .dart file. For example just under the 'web' directory. In this file we can put our HTML. The important thing is that here we will add the navigation components and the router-outlet, the router-outlet will later render the components that our RouteConfig is binding to. For example when the user clicks on 'Login', it will show the LoginComponent's template where the router-outlet is defined.

The full HTML looks like this:
```
<div class="container">
    <nav class="navbar navbar-default">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>
            <div id="navbar" class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a [routerLink]="['Public']">Public</a></li>
                    <li><a [routerLink]="['Private']">Private</a></li>
                    <li><a [routerLink]="['Login']">Login</a></li>
                </ul>
                <ul class="nav navbar-nav pull-right">
                    <li><a (click)="logout()" href="void(0)">logout</a></li>
                </ul>
            </div>
            <div id="routerdiv">
                <router-outlet></router-outlet>
            </div>
        </div>
    </nav>

</div>
```

The special thing about this HTML are the '<a>' tags, for example: '<a [routerLink]="['Login']">Login</a>'. The '[routerLink]=..' part is where we pass data from the routeConfig to the routerLink. Apart from this there is also a '(click)="logout()"' inside this HTML, which is a binding from the HTML to a method inside our dart component. We have not yet created this dart component but we will do that once we are dealing with the login.

## Dealing with Changes
Write some information about how Angular2 deals with change detection, such as how to correctly handle data being added to the array of users. 

## ASIDE: Integrating with Auth0
Extend our application to use JWT, and manage the login with Auth0. Provide information to further reading about Auth0 and other Angular2 blogs using Auth0.


# Conclusion
Angular2 with Dart is still undergoing development so everything that you read here could potentially change in the future so this conclusion might not hold some weeks or months from now. Dart as a language seems to be well developed and offers developers a wide range of features and benefits. It might be worth learning Dart even if you do not plan on doing any development with Angular2 as the reach of Dart is much more than just Angular2. In terms of Angular2 development, it seems to me that Angular2 with TypeScript is a safer route to go. The release of Angular2 with TypeScript is in the first final version so there should, in theory, be no more breaking changes. As Google is developing both versions of Angular independently it does mean that once both hit the final release, developers will have a choice in which language they feel most comfortable with and which one will integrate best with their environment. As so often with sofware development, the road you should take depends on the specific problem you are solving, and as always, your mileage may vary.

### Further reading
* [Angular2 + Dart quickstart](https://angular.io/docs/dart/latest/quickstart.html)
* [Dart news](http://news.dartlang.org/)

